name: 'Maximize build disk space (Only remove unwanted software)'
description: 'Maximize the available disk space for your build job by removing unwanted software'
branding:
  icon: 'crop'
  color: 'blue'
inputs:
  use-sudo:
    description: 'Whether to use sudo for removing files. Default is true.'
    required: false
    default: 'true'
  remove-dotnet:
    description: 'Removes .NET runtime and libraries. (frees ~4 GB)'
    required: false
    default: 'true'
  remove-android:
    description: 'Removes Android SDKs and Tools. (frees ~11 GB)'
    required: false
    default: 'true'
  remove-haskell:
    description: 'Removes GHC (Haskell) artifacts. (frees a few MBs)'
    required: false
    default: 'true'
  remove-large-packages:
    description: 'Removes large packages. (frees ~5 GB)'
    required: false
    default: 'true'
  remove-docker-cached-images:
    description: 'Removes cached images in docker. (frees ~5 GB)'
    required: false
    default: 'true'
  remove-codeql:
    description: 'Removes CodeQL Action Bundles. (frees ~5.4 GB)'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    - name: Disk space report before modification
      shell: bash
      run: |
          echo "==> Available space before cleanup"
          echo
          df -h

    - name: Maximize build disk space
      shell: bash
      run: |
          set -euo pipefail
          if [[ "${{ inputs.use-sudo }}" == 'true' ]]; then
            SUDO_PREFIX="sudo"
          else
            SUDO_PREFIX=""
          fi

          echo -n "  Removing:     "
          if [[ ${{ inputs.remove-dotnet }} == 'true' ]]; then
            echo -n "dotnet "
          fi
          if [[ ${{ inputs.remove-android }} == 'true' ]]; then
            echo -n "android "
          fi
          if [[ ${{ inputs.remove-haskell }} == 'true' ]]; then
            echo -n "haskell "
          fi
          if [[ ${{ inputs.remove-large-packages }} == 'true' ]]; then
            echo -n "large-packages "
          fi
          if [[ ${{ inputs.remove-docker-cached-images }} == 'true' ]]; then
            echo -n "remove-docker-cached-images "
          fi
          if [[ ${{ inputs.remove-codeql }} == 'true' ]]; then
            echo -n "codeql "
          fi
          echo

          echo "Removing unwanted software... "
          if [[ ${{ inputs.remove-dotnet }} == 'true' ]]; then
            $SUDO_PREFIX rm -rf /usr/share/dotnet
          fi
          if [[ ${{ inputs.remove-android }} == 'true' ]]; then
            $SUDO_PREFIX rm -rf /usr/local/lib/android
          fi
          if [[ ${{ inputs.remove-haskell }} == 'true' ]]; then
            $SUDO_PREFIX rm -rf /opt/ghc
          fi
          if [[ ${{ inputs.remove-large-packages }} == 'true' ]]; then
            $SUDO_PREFIX apt-get purge -y \
              '^llvm-.*' \
              'php.*' \
              '^mongodb-.*' \
              '^mysql-.*' \
              azure-cli \
              google-chrome-stable \
              firefox \
              powershell \
              microsoft-edge-stable \
              mono-devel
            $SUDO_PREFIX apt-get autoremove -y
            $SUDO_PREFIX apt-get clean
          fi
          if [[ ${{ inputs.remove-docker-cached-images }} == 'true' ]]; then
            $SUDO_PREFIX docker image prune --all --force
          fi
          if [[ ${{ inputs.remove-codeql }} == 'true' ]]; then
            $SUDO_PREFIX rm -rf /opt/hostedtoolcache/CodeQL
          fi
          echo "... done"

    - name: Disk space report after modification
      shell: bash
      run: |
          echo "==> Available space after cleanup"
          echo
          df -h
